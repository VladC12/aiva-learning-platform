import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';

/**
 * Splits a canvas into multiple parts if it's too tall for one page
 */
export function splitCanvasToPages(canvas: HTMLCanvasElement, maxHeight: number): HTMLCanvasElement[] {
  const canvases: HTMLCanvasElement[] = [];
  const totalHeight = canvas.height;
  
  if (totalHeight <= maxHeight) {
    return [canvas];
  }
  
  let currentY = 0;
  while (currentY < totalHeight) {
    const remainingHeight = totalHeight - currentY;
    const sliceHeight = Math.min(maxHeight, remainingHeight);
    
    // Create new canvas for this slice
    const sliceCanvas = document.createElement('canvas');
    sliceCanvas.width = canvas.width;
    sliceCanvas.height = sliceHeight;
    
    const ctx = sliceCanvas.getContext('2d');
    if (ctx) {
      ctx.drawImage(
        canvas,
        0, currentY, canvas.width, sliceHeight,
        0, 0, canvas.width, sliceHeight
      );
    }
    
    canvases.push(sliceCanvas);
    currentY += sliceHeight;
  }
  
  return canvases;
}

/**
 * Adds watermarks and page numbers to all pages of the PDF
 */
export function addPdfMetadata(pdf: jsPDF): void {
  const pdfWidth = pdf.internal.pageSize.getWidth();
  const pdfHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  const totalPages = pdf.getNumberOfPages();
  
  for (let pageNum = 1; pageNum <= totalPages; pageNum++) {
    pdf.setPage(pageNum);
    
    // Save graphic state for watermark
    pdf.saveGraphicsState();
    
    try {
      // Create GState for transparency
      const pdfWithGState = pdf as jsPDF & { GState: new (config: { opacity: number }) => unknown };
      if (pdfWithGState.GState) {
        const gState = new pdfWithGState.GState({ opacity: 0.1 });
        pdf.setGState(gState);
      }
    } catch (e) {
      // Fallback if GState is not available
      console.warn('GState not available, watermark will be opaque');
    }
    
    // Add watermark
    pdf.setFontSize(30);
    pdf.setTextColor(150, 150, 150);
    pdf.setFont('helvetica', 'italic');
    
    const watermarkText = 'aiva.vision';
    const textWidth = pdf.getTextWidth(watermarkText);
    
    pdf.text(watermarkText, pdfWidth / 2 - textWidth / 2, pdfHeight / 2, {
      angle: -45
    });
    
    // Restore graphic state
    pdf.restoreGraphicsState();
    
    // Add development banner
    pdf.setFontSize(10);
    pdf.setTextColor(150, 150, 150);
    pdf.setFont('helvetica', 'bold');
    pdf.text('IN DEVELOPMENT', margin, 10);
    
    // Add footer
    pdf.setFontSize(10);
    pdf.setTextColor(150, 150, 150);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Generated by aiva.vision', pdfWidth - 100, pdfHeight - 10);
    
    // Add page numbers
    pdf.text(`Page ${pageNum} of ${totalPages}`, pdfWidth / 2 - 15, pdfHeight - 10);
  }
}

/**
 * Downloads a PDF document
 */
export function downloadPDF(filename: string): void {
  console.log(`PDF ${filename} downloaded`);
}
